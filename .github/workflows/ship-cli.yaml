name: Ship CLI

on:
  push:
    branches:
      - main
      - 'preview/**'

jobs:
  package:
    runs-on: ${{ matrix.os }}
    env:
      TERM: xterm
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        node-version:
          - '14'
        variant:
          - linux-x64
          - linux-arm64
          - macos-x64
          - macos-arm64
          - win-x64
    steps:
      # Install deps and cache
      # Eventually it would be great if these steps could live in a separate YAML file
      # that could be included in line to avoid code duplication
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Use Yarn cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install Yarn dependencies
        run: yarn install --prefer-offline --frozen-lockfile

      # Package and upload the cli
      # @NOTE: We cross-compile on Linux because _right now_ this seems to be
      # the only place we can reliably build all the variants. We use actions/upload
      # so move assets between jobs
      - name: Package ${{ matrix.variant }} CLI
        run: |
          node ./scripts/dev-version.js
          node ./bin/lando.js version
          yarn pkg --target=node${{ matrix.node-version }}-${{ matrix.variant }} --no-version
      - name: Upload lando-build-${{ matrix.variant }}-${{ github.sha }}
        uses: actions/upload-artifact@v2
        with:
          name: lando-build-${{ matrix.variant }}-${{ github.sha }}
          path: dist/
          if-no-files-found: error
          retention-days: 1
          # GITHUB_SHA
          # GITHUB_REF

  ship:
    runs-on: ${{ matrix.os }}
    needs:
      - package
    env:
      TERM: xterm
    strategy:
      matrix:
        os:
          - macos-10.15
          - ubuntu-20.04
          - windows-2019
        arch:
          - x64
          - arm64
        exclude:
          - os: windows-2019
            arch: arm64
    steps:
      # Set things up for signing, notarizing, uploading etc
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set other variables
        id: vars
        shell: bash
        run: |
          # Set generic source ref vars
          echo '::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}'
          echo '::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}'
          echo '::set-output name=SOURCE_TAG::$(git describe --tags --abbrev=0)'
          # Set os specific vars
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo '::set-output name=OS::linux'
            echo '::set-output name=PKG_ENDING::'
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo '::set-output name=OS::win'
            echo '::set-output name=PKG_ENDING::.exe'
          else
            echo '::set-output name=OS::macos'
            echo '::set-output name=PKG_ENDING::'
          fi
      - name: Set SOURCE_PKG
        id: pkg
        shell: bash
        run: echo '::set-output name=SOURCE_PKG::lando-${{ steps.vars.outputs.OS }}-${{ matrix.arch }}${{ steps.vars.outputs.PKG_ENDING }}'
      - name: Test user defined variables
        shell: bash
        run: |
          echo "The OS is ${{ steps.vars.outputs.OS }}"
          echo "The SOURCE_NAME is ${{ steps.vars.outputs.SOURCE_NAME }}"
          echo "The SOURCE_BRANCH is ${{ steps.vars.outputs.SOURCE_BRANCH }}"
          echo "The SOURCE_TAG is ${{ steps.vars.outputs.SOURCE_TAG }}"
          echo "The SOURCE_PKG is ${{ steps.pkg.outputs.SOURCE_PKG }}"
      - name: Download lando-build-${{ steps.vars.outputs.OS }}-${{ matrix.arch }}-${{ github.sha }}
        uses: actions/download-artifact@v2
        with:
          name: lando-build-${{ steps.vars.outputs.OS }}-${{ matrix.arch }}-${{ github.sha }}
          path: dist

      # Codesign macOS binaries
      # NOTE: We cannot currently do this on macOS because of below issue
      # https://github.com/vercel/pkg/issues/128
      # However, the logic is here and ready to go once that is resolved
      # NOTE: We also should add notarization logic here?
      - name: Codesign macOS binaries
        env:
          APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_TEAM_ID: FY8GAUX282
        if: ${{ steps.vars.outputs.OS == 'macos' }}
        run: |
          ./scripts/sign-macos.sh ./dist/{{ steps.pkg.outputs.SOURCE_PKG }}
          echo "::warning:: Codesign currently disabled because of https://github.com/vercel/pkg/issues/128"
      # Codesign WiNdOzE binaries
      - name: Codesign Windoze binaries
        env:
          WINDOZE_CERT_DATA: ${{ secrets.WINDOZE_CERT_DATA }}
          WINDOZE_CERT_PASSWORD: ${{ secrets.WINDOZE_CERT_PASSWORD }}
        if: ${{ steps.vars.outputs.OS == 'win' }}
        shell: powershell
        run: ./scripts/sign-win.ps1 ./dist/{{ steps.pkg.outputs.SOURCE_PKG }}

      # Depending on the type of commit eg tagged, etc create the releases we need
      - name: Create releases
        shell: bash
        run: |
          mkdir -p ./releases



